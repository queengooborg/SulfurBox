package vdscratchy.sulfurbox.gui;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Properties;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.jdesktop.beansbinding.AutoBinding;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.Binding;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.ELProperty;
import vdscratchy.sulfurbox.construct.GenerateAll;
import vdscratchy.sulfurbox.handlers.CurrentProjectHandler;

/**
 * SulfurBox - vdscratchy.sulfurbox.gui.SulfurBoxGui
 *
 * @author Brandon3055, Vinyl Darkscratch, Covers1624
 * @version 0.0.1
 * @since 0.0.1
 *
 * This is the base code for the project's GUI.  It interacts with the various handlers, primarily the
 * {@link vdscratchy.sulfurbox.handlers.CurrentProjectHandler}, to create the core of the program.  It is advised to
 * avoid modifying any of the code in this class, aside from the event handlers, as they are generated by NetBeans.
 *
 * @see vdscratchy.sulfurbox.handlers.CurrentProjectHandler
 * @see vdscratchy.sulfurbox.data.Mod
 */
public class SulfurBoxGui extends javax.swing.JFrame {

	private Properties properties = new Properties();
	private CurrentProjectHandler currentProject = new CurrentProjectHandler();
	private Color invalidTextFieldInputColor;
	private Color invalidChoiceInputColor;

	private static final int CTRLCMD = Toolkit.getDefaultToolkit().getMenuShortcutKeyMask();

	/**
	 * Creates new form SulfurBoxGui
	 */
	public SulfurBoxGui() {
		System.setProperty("apple.laf.useScreenMenuBar", "true"); // Needed for macOS

		loadProperties();

		invalidTextFieldInputColor = new Color((int)(Math.max(0.0, Math.min(UIManager.getDefaults().getColor("TextField.background").getRed() * 2.0, 255.0))),
				(int)(Math.max(0.0, Math.min(UIManager.getDefaults().getColor("TextField.background").getGreen() * 0.8, 255.0))),
				(int)(Math.max(0.0, Math.min(UIManager.getDefaults().getColor("TextField.background").getBlue() * 0.8, 255.0))),
				UIManager.getDefaults().getColor("TextField.background").getAlpha());

		invalidChoiceInputColor = new Color((int)(Math.max(0.0, Math.min(UIManager.getDefaults().getColor("ComboBox.background").getRed() * 2.0, 255.0))),
				(int)(Math.max(0.0, Math.min(UIManager.getDefaults().getColor("ComboBox.background").getGreen() * 0.8, 255.0))),
				(int)(Math.max(0.0, Math.min(UIManager.getDefaults().getColor("ComboBox.background").getBlue() * 0.8, 255.0))),
				UIManager.getDefaults().getColor("ComboBox.background").getAlpha());

		initComponents();
		initLAFMenu();
		pack();
	}

	//TODO Create a proper global properties handler
	private void loadProperties() {
		try {
			File propertyFile = new File("properties");
			if (!propertyFile.exists()) {
				propertyFile.createNewFile();
			}
			properties.load(new FileInputStream(propertyFile));
		} catch (IOException e) {
			throw new RuntimeException(e);
		}

		try {
			UIManager.setLookAndFeel(properties.getProperty("laf", "com.bulenkov.darcula.DarculaLaf"));
			SwingUtilities.updateComponentTreeUI(SulfurBoxGui.this);
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * This is done runtime rather then hard coded into the gui so that it can support all installed LAF's including OS dependent LAF's
	 * ps. LAF = LookAndFeel
	 */
	private void initLAFMenu() {
		ButtonGroup btnGroup = new ButtonGroup();

		for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
			JRadioButtonMenuItem laf = new JRadioButtonMenuItem(info.getName());
			btnGroup.add(laf);
			lafMenu.add(laf);

			if (UIManager.getLookAndFeel().getName().equals(info.getName())) {
				laf.setSelected(true);
			}

			laf.addActionListener(event -> {
				try {
					properties.setProperty("laf", info.getClassName());
					properties.store(new FileOutputStream("properties"), "Props //TODO create a proper global properties file");

					UIManager.setLookAndFeel(info.getClassName());
					SwingUtilities.updateComponentTreeUI(SulfurBoxGui.this);
					if (info.getName().equals("Metal")) {
						JOptionPane.showMessageDialog(SulfurBoxGui.this, "A restart may be required to correctly apply this change.", "Info", JOptionPane.INFORMATION_MESSAGE);
					}
				}
				catch (Exception e) {
					e.printStackTrace();
					JOptionPane.showMessageDialog(SulfurBoxGui.this, "Something when wrong while setting new look and feel!\n" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
				}
			});
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new BindingGroup();

        ideButtonGroup = new ButtonGroup();
        modPropertyTabs = new JTabbedPane();
        modPanel = new JPanel();
        modNameLabel = new JLabel();
        modNameField = new JTextField();
        modPackageLabel = new JLabel();
        modPackageField = new JTextField();
        modPackageSeparatorLabel = new JLabel();
        modPackageMemberField = new JTextField();
        modVersionLabel = new JLabel();
        modVersionField = new JTextField();
        mcForgeVersionLabel = new JLabel();
        mcVersionSelect = new JComboBox<>();
        forgeVersionSelect = new JComboBox<>();
        modDescriptionLabel = new JLabel();
        modDescriptionScrlPane = new JScrollPane();
        modDescriptionField = new JTextArea();
        modHomePageLabel = new JLabel();
        modHomePageHttpsSelect = new JComboBox<>();
        modHomePageField = new JTextField();
        modRepoLabel = new JLabel();
        modRepoField = new JTextField();
        issueTrackerLabel = new JLabel();
        issueTrackerField = new JTextField();
        modUpdateChecksLabel = new JLabel();
        modUpdateChecksField = new JTextField();
        modCurseIDLabel = new JLabel();
        modCurseIDField = new JTextField();
        modLicenseLabel = new JLabel();
        modLicenseField = new JComboBox<>();
        modLogoLabel = new JLabel();
        modLogoField = new JTextField();
        modLogoBrowseButton = new JButton();
        attribPanel = new JPanel();
        attribContributorScrlPane = new JScrollPane();
        attribContributorTable = new JTable();
        attribContributorAdd = new JButton();
        attribContributorRemove = new JButton();
        attribCreditsLabel = new JLabel();
        attribCreditsScrlPane = new JScrollPane();
        attribCreditsField = new JTextArea();
        depPanel = new JPanel();
        depParentLabel = new JLabel();
        depParentCheck = new JCheckBox();
        depParentField = new JTextField();
        depModsPanel = new JPanel();
        depModsLabel = new JLabel();
        depModsAdd = new JButton();
        depModsRemove = new JButton();
        depModsScrlPane = new JScrollPane();
        depModsTable = new JTable();
        depJavaLibsPanel = new JPanel();
        depJavaLibsFields = new JLabel();
        depJavaLibsAdd = new JButton();
        depJavaLibsRemove = new JButton();
        depJavaLibsScrlPane = new JScrollPane();
        depJavaLibsList = new JList<>();
        depMavenRepsPanel = new JPanel();
        depMavenRepsLabel = new JLabel();
        depMavenRepsAdd = new JButton();
        depMavenRepsRemove = new JButton();
        depMavenRepsScrlPane = new JScrollPane();
        depMavenRepsList = new JList<>();
        depManifestPanel = new JPanel();
        depManifestLabel = new JLabel();
        depManifestAdd = new JButton();
        depManifestRemove = new JButton();
        depManifestScrlPane = new JScrollPane();
        depManifestList = new JList<>();
        intellijRadButton = new JRadioButton();
        eclipseRadButton = new JRadioButton();
        gradleVersionLabel = new JLabel();
        javaVersionLabel = new JLabel();
        modGeneratePanel = new JPanel();
        modGenerateButton = new JButton();
        filler1 = new Box.Filler(new Dimension(0, 0), new Dimension(0, 0), new Dimension(32767, 0));
        filler2 = new Box.Filler(new Dimension(0, 0), new Dimension(0, 0), new Dimension(32767, 0));
        menuBar = new JMenuBar();
        fileMenu = new JMenu();
        menuItemNew = new JMenuItem();
        menuItemOpen = new JMenuItem();
        menuItemSave = new JMenuItem();
        menuItemSaveAs = new JMenuItem();
        editMenu = new JMenu();
        menuItemCopy = new JMenuItem();
        menuItemCut = new JMenuItem();
        menuItemPaste = new JMenuItem();
        menuItemSelectAll = new JMenuItem();
        menuItemDeselect = new JMenuItem();
        projectMenu = new JMenu();
        menuItemGenerate = new JMenuItem();
        menuItemClean = new JMenuItem();
        menuItemCompileJar = new JMenuItem();
        aboutMenu = new JMenu();
        menuItemAboutSB = new JMenuItem();
        menuItemManual = new JMenuItem();
        menuItemOnlineSupport = new JMenuItem();
        menuItemCheckUpdates = new JMenuItem();
        menuItemRequestRepo = new JMenuItem();
        optionsMenu = new JMenu();
        lafMenu = new JMenu();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("SulfurBox");
        setMinimumSize(new Dimension(400, 690));

        modPanel.setBorder(BorderFactory.createEtchedBorder());

        modNameLabel.setText("Name");

        modNameField.setText("Test Mod");
        modNameField.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                modNameFieldKeyReleased(evt);
            }
        });

        modPackageLabel.setText("Package");

        modPackageField.setText("mods.badhandwriting.org");
        modPackageField.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                modPackageFieldKeyReleased(evt);
            }
        });

        modPackageSeparatorLabel.setText(".");

        modPackageMemberField.setText("testmod");
        modPackageMemberField.setMaximumSize(new Dimension(73, 24));
        modPackageMemberField.setMinimumSize(new Dimension(73, 24));
        modPackageMemberField.setName(""); // NOI18N
        modPackageMemberField.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                modPackageMemberFieldKeyReleased(evt);
            }
        });

        modVersionLabel.setText("Version");

        modVersionField.setText("0.0.1.# - DEV");
        modVersionField.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                modVersionFieldKeyReleased(evt);
            }
        });

        mcForgeVersionLabel.setText("Forge Version");

        mcVersionSelect.setModel(new DefaultComboBoxModel<>(new String[] { "MC 1.11.2" }));
        mcVersionSelect.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                mcVersionSelectItemStateChanged(evt);
            }
        });

        forgeVersionSelect.setModel(new DefaultComboBoxModel<>(new String[] { "13.20.10.2228 - Recommended" }));
        forgeVersionSelect.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                forgeVersionSelectItemStateChanged(evt);
            }
        });

        modDescriptionLabel.setText("Description");

        modDescriptionField.setColumns(20);
        modDescriptionField.setRows(5);
        modDescriptionField.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                modDescriptionFieldKeyReleased(evt);
            }
        });
        modDescriptionScrlPane.setViewportView(modDescriptionField);

        modHomePageLabel.setText("Home Page");

        modHomePageHttpsSelect.setModel(new DefaultComboBoxModel<>(new String[] { "https://", "http://" }));
        modHomePageHttpsSelect.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                modHomePageHttpsSelectItemStateChanged(evt);
            }
        });

        modHomePageField.setText("www.???.org");
        modHomePageField.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                modHomePageFieldKeyReleased(evt);
            }
        });

        modRepoLabel.setText("Repository");

        modRepoField.setText("https://github.com/brandon3055/Draconic-Evolution");
        modRepoField.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                modRepoFieldKeyReleased(evt);
            }
        });

        issueTrackerLabel.setText("Issue Tracker");

        issueTrackerField.setText("https://github.com/brandon3055/Draconic-Evolution/issues");
        issueTrackerField.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                issueTrackerFieldKeyReleased(evt);
            }
        });

        modUpdateChecksLabel.setText("Update Checks");

        modUpdateChecksField.setText("www.blablabla.com/stuff");
        modUpdateChecksField.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                modUpdateChecksFieldKeyReleased(evt);
            }
        });

        modCurseIDLabel.setText("CurseForge ID");

        modCurseIDField.setText("907694083706973409786");
        modCurseIDField.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                modCurseIDFieldKeyReleased(evt);
            }
        });

        modLicenseLabel.setText("License");

        modLicenseField.setEditable(true);
        modLicenseField.setModel(new DefaultComboBoxModel<>(new String[] { "GNU GPL V3.0" }));
        modLicenseField.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                modLicenseFieldItemStateChanged(evt);
            }
        });
        modLicenseField.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                modLicenseFieldKeyReleased(evt);
            }
        });

        modLogoLabel.setText("Logo File");

        modLogoField.setText("resources/textures/logo.png");
        modLogoField.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                modLogoFieldKeyReleased(evt);
            }
        });

        modLogoBrowseButton.setText("Browse");
        modLogoBrowseButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                modLogoBrowseButtonActionPerformed(evt);
            }
        });

        GroupLayout modPanelLayout = new GroupLayout(modPanel);
        modPanel.setLayout(modPanelLayout);
        modPanelLayout.setHorizontalGroup(modPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(modPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(modPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(modUpdateChecksLabel)
                    .addGroup(modPanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                        .addComponent(modLogoLabel, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(modLicenseLabel, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(modCurseIDLabel, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(modPanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                        .addComponent(modDescriptionLabel, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(modVersionLabel, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(modPackageLabel, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(modNameLabel, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(mcForgeVersionLabel, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(modRepoLabel, GroupLayout.PREFERRED_SIZE, 79, GroupLayout.PREFERRED_SIZE)
                    .addComponent(modHomePageLabel, GroupLayout.PREFERRED_SIZE, 79, GroupLayout.PREFERRED_SIZE)
                    .addComponent(issueTrackerLabel))
                .addGap(18, 18, 18)
                .addGroup(modPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(modRepoField, GroupLayout.Alignment.TRAILING)
                    .addGroup(modPanelLayout.createSequentialGroup()
                        .addComponent(modPackageField)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(modPackageSeparatorLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(modPackageMemberField, GroupLayout.PREFERRED_SIZE, 92, GroupLayout.PREFERRED_SIZE))
                    .addComponent(modNameField)
                    .addComponent(modVersionField)
                    .addGroup(modPanelLayout.createSequentialGroup()
                        .addComponent(mcVersionSelect, GroupLayout.PREFERRED_SIZE, 115, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(forgeVersionSelect, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(modDescriptionScrlPane)
                    .addComponent(modUpdateChecksField)
                    .addComponent(modCurseIDField)
                    .addComponent(modLicenseField, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(modPanelLayout.createSequentialGroup()
                        .addComponent(modLogoField)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(modLogoBrowseButton))
                    .addGroup(modPanelLayout.createSequentialGroup()
                        .addComponent(modHomePageHttpsSelect, GroupLayout.PREFERRED_SIZE, 69, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(modHomePageField))
                    .addComponent(issueTrackerField, GroupLayout.DEFAULT_SIZE, 598, Short.MAX_VALUE))
                .addContainerGap())
        );
        modPanelLayout.setVerticalGroup(modPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(modPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(modPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(modNameField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(modNameLabel))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(modPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(modPackageField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(modPackageSeparatorLabel)
                    .addComponent(modPackageMemberField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(modPackageLabel))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(modPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(modVersionField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(modVersionLabel))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(modPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(mcVersionSelect, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(forgeVersionSelect, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(mcForgeVersionLabel))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(modPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(modDescriptionLabel)
                    .addComponent(modDescriptionScrlPane, GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(modPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(modHomePageField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(modHomePageHttpsSelect, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(modHomePageLabel))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(modPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(modRepoField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(modRepoLabel))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(modPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(issueTrackerField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(issueTrackerLabel))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(modPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(modUpdateChecksField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(modUpdateChecksLabel))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(modPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(modCurseIDField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(modCurseIDLabel))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(modPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(modLicenseField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(modLicenseLabel))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(modPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(modLogoLabel)
                    .addComponent(modLogoField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(modLogoBrowseButton))
                .addGap(16, 16, 16))
        );

        modPropertyTabs.addTab("Mod Info", modPanel);

        attribContributorTable.setModel(new DefaultTableModel(
            new Object [][] {
                { "//TODO", "//TODO", "//TODO", "//TODO"}
            },
            new String [] {
                "", "Name", "Username", "Role"
            }
        )
        {
            Class[] types = new Class [] {
                Boolean.class, String.class, String.class
            };

            public Class getColumnClass(int column) {
                Object c = getValueAt(0, column);
                return c == null ? String.class : c.getClass();
            }
        });
        attribContributorTable.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                attribContributorTableKeyReleased(evt);
            }
        });
        attribContributorScrlPane.setViewportView(attribContributorTable);

        attribContributorAdd.setText("+");
        attribContributorAdd.setToolTipText("Add Contributer");
        attribContributorAdd.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                attribContributorAddActionPerformed(evt);
            }
        });

        attribContributorRemove.setText("x");
        attribContributorRemove.setToolTipText("Remove Selected");
        attribContributorRemove.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                attribContributorRemoveActionPerformed(evt);
            }
        });

        attribCreditsLabel.setText("Credits");

        attribCreditsField.setColumns(20);
        attribCreditsField.setRows(5);
        attribCreditsField.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                attribCreditsFieldKeyReleased(evt);
            }
        });
        attribCreditsScrlPane.setViewportView(attribCreditsField);

        GroupLayout attribPanelLayout = new GroupLayout(attribPanel);
        attribPanel.setLayout(attribPanelLayout);
        attribPanelLayout.setHorizontalGroup(attribPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(attribPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(attribPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(attribCreditsScrlPane)
                    .addGroup(attribPanelLayout.createSequentialGroup()
                        .addComponent(attribCreditsLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(attribContributorAdd)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(attribContributorRemove))
                    .addComponent(attribContributorScrlPane, GroupLayout.DEFAULT_SIZE, 714, Short.MAX_VALUE))
                .addContainerGap())
        );
        attribPanelLayout.setVerticalGroup(attribPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(attribPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(attribContributorScrlPane, GroupLayout.PREFERRED_SIZE, 350, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(attribPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(attribContributorRemove, GroupLayout.PREFERRED_SIZE, 19, GroupLayout.PREFERRED_SIZE)
                    .addComponent(attribContributorAdd, GroupLayout.PREFERRED_SIZE, 19, GroupLayout.PREFERRED_SIZE)
                    .addComponent(attribCreditsLabel))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(attribCreditsScrlPane, GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                .addContainerGap())
        );

        modPropertyTabs.addTab("Attribution", attribPanel);

        depPanel.setBorder(BorderFactory.createEtchedBorder());

        depParentLabel.setText("Parent Mod");

        depParentCheck.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                depParentCheckStateChanged(evt);
            }
        });

        Binding binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, depParentCheck, ELProperty.create("${selected}"), depParentField, BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        depParentField.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                depParentFieldKeyReleased(evt);
            }
        });

        depModsPanel.setBorder(BorderFactory.createEtchedBorder());

        depModsLabel.setText("Mod Dependencies");

        depModsAdd.setText("+");
        depModsAdd.setToolTipText("Add New");
        depModsAdd.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                depModsAddActionPerformed(evt);
            }
        });

        depModsRemove.setText("x");
        depModsRemove.setToolTipText("Remove Selected");
        depModsRemove.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                depModsRemoveActionPerformed(evt);
            }
        });

        depModsTable.setModel(new DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Mod Name", "Required Version"
            }
        ) {
            Class[] types = new Class [] {
                String.class, String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        depModsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        depModsTable.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                depModsTableKeyReleased(evt);
            }
        });
        depModsScrlPane.setViewportView(depModsTable);
        if (depModsTable.getColumnModel().getColumnCount() > 0) {
            depModsTable.getColumnModel().getColumn(0).setPreferredWidth(200);
            depModsTable.getColumnModel().getColumn(1).setPreferredWidth(100);
        }

        GroupLayout depModsPanelLayout = new GroupLayout(depModsPanel);
        depModsPanel.setLayout(depModsPanelLayout);
        depModsPanelLayout.setHorizontalGroup(depModsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(depModsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(depModsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(depModsScrlPane, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(GroupLayout.Alignment.TRAILING, depModsPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(depModsAdd)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(depModsRemove))
                    .addComponent(depModsLabel, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        depModsPanelLayout.setVerticalGroup(depModsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(depModsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(depModsLabel)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(depModsScrlPane, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(depModsPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(depModsRemove, GroupLayout.PREFERRED_SIZE, 19, GroupLayout.PREFERRED_SIZE)
                    .addComponent(depModsAdd, GroupLayout.PREFERRED_SIZE, 19, GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        depJavaLibsPanel.setBorder(BorderFactory.createEtchedBorder());

        depJavaLibsFields.setText("Java Dependencies");

        depJavaLibsAdd.setText("+");
        depJavaLibsAdd.setToolTipText("Add New");
        depJavaLibsAdd.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                depJavaLibsAddActionPerformed(evt);
            }
        });

        depJavaLibsRemove.setText("x");
        depJavaLibsRemove.setToolTipText("Remove Selected");
        depJavaLibsRemove.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                depJavaLibsRemoveActionPerformed(evt);
            }
        });

        depJavaLibsList.setModel(new AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        depJavaLibsList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        depJavaLibsList.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                depJavaLibsListKeyReleased(evt);
            }
        });
        depJavaLibsScrlPane.setViewportView(depJavaLibsList);

        GroupLayout depJavaLibsPanelLayout = new GroupLayout(depJavaLibsPanel);
        depJavaLibsPanel.setLayout(depJavaLibsPanelLayout);
        depJavaLibsPanelLayout.setHorizontalGroup(depJavaLibsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(depJavaLibsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(depJavaLibsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(depJavaLibsScrlPane)
                    .addComponent(depJavaLibsFields, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(GroupLayout.Alignment.TRAILING, depJavaLibsPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(depJavaLibsAdd)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(depJavaLibsRemove)))
                .addContainerGap())
        );
        depJavaLibsPanelLayout.setVerticalGroup(depJavaLibsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(depJavaLibsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(depJavaLibsFields)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(depJavaLibsScrlPane, GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(depJavaLibsPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(depJavaLibsRemove, GroupLayout.PREFERRED_SIZE, 19, GroupLayout.PREFERRED_SIZE)
                    .addComponent(depJavaLibsAdd, GroupLayout.PREFERRED_SIZE, 19, GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        depMavenRepsPanel.setBorder(BorderFactory.createEtchedBorder());

        depMavenRepsLabel.setText("Maven Repositories");

        depMavenRepsAdd.setText("+");
        depMavenRepsAdd.setToolTipText("Add New");
        depMavenRepsAdd.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                depMavenRepsAddActionPerformed(evt);
            }
        });

        depMavenRepsRemove.setText("x");
        depMavenRepsRemove.setToolTipText("Remove Selected");
        depMavenRepsRemove.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                depMavenRepsRemoveActionPerformed(evt);
            }
        });

        depMavenRepsList.setModel(new AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        depMavenRepsList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        depMavenRepsList.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                depMavenRepsListKeyReleased(evt);
            }
        });
        depMavenRepsScrlPane.setViewportView(depMavenRepsList);

        GroupLayout depMavenRepsPanelLayout = new GroupLayout(depMavenRepsPanel);
        depMavenRepsPanel.setLayout(depMavenRepsPanelLayout);
        depMavenRepsPanelLayout.setHorizontalGroup(depMavenRepsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(depMavenRepsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(depMavenRepsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(depMavenRepsScrlPane)
                    .addGroup(depMavenRepsPanelLayout.createSequentialGroup()
                        .addGroup(depMavenRepsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(depMavenRepsLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(GroupLayout.Alignment.TRAILING, depMavenRepsPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(depMavenRepsAdd)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(depMavenRepsRemove)))
                        .addContainerGap())))
        );
        depMavenRepsPanelLayout.setVerticalGroup(depMavenRepsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(depMavenRepsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(depMavenRepsLabel)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(depMavenRepsScrlPane, GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(depMavenRepsPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(depMavenRepsRemove, GroupLayout.PREFERRED_SIZE, 19, GroupLayout.PREFERRED_SIZE)
                    .addComponent(depMavenRepsAdd, GroupLayout.PREFERRED_SIZE, 19, GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        depManifestPanel.setBorder(BorderFactory.createEtchedBorder());

        depManifestLabel.setText("Manifest");

        depManifestAdd.setText("+");
        depManifestAdd.setToolTipText("Add New");
        depManifestAdd.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                depManifestAddActionPerformed(evt);
            }
        });

        depManifestRemove.setText("x");
        depManifestRemove.setToolTipText("Remove Selected");
        depManifestRemove.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                depManifestRemoveActionPerformed(evt);
            }
        });

        depManifestList.setModel(new AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        depManifestList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        depManifestList.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                depManifestListKeyReleased(evt);
            }
        });
        depManifestScrlPane.setViewportView(depManifestList);

        GroupLayout depManifestPanelLayout = new GroupLayout(depManifestPanel);
        depManifestPanel.setLayout(depManifestPanelLayout);
        depManifestPanelLayout.setHorizontalGroup(depManifestPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(depManifestPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(depManifestPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(depManifestScrlPane)
                    .addComponent(depManifestLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(GroupLayout.Alignment.TRAILING, depManifestPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(depManifestAdd)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(depManifestRemove)))
                .addContainerGap())
        );
        depManifestPanelLayout.setVerticalGroup(depManifestPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(depManifestPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(depManifestLabel)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(depManifestScrlPane, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(depManifestPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(depManifestRemove, GroupLayout.PREFERRED_SIZE, 19, GroupLayout.PREFERRED_SIZE)
                    .addComponent(depManifestAdd, GroupLayout.PREFERRED_SIZE, 19, GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        GroupLayout depPanelLayout = new GroupLayout(depPanel);
        depPanel.setLayout(depPanelLayout);
        depPanelLayout.setHorizontalGroup(depPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(depPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(depParentLabel)
                .addGap(34, 34, 34)
                .addComponent(depParentCheck)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(depParentField)
                .addContainerGap())
            .addGroup(GroupLayout.Alignment.TRAILING, depPanelLayout.createSequentialGroup()
                .addGroup(depPanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addComponent(depMavenRepsPanel, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(depModsPanel, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(depPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(depJavaLibsPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(depManifestPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        depPanelLayout.setVerticalGroup(depPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(depPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(depPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(depParentCheck)
                    .addGroup(depPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(depParentLabel)
                        .addComponent(depParentField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(depPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(depJavaLibsPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(depModsPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(depPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(depMavenRepsPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(depManifestPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        modPropertyTabs.addTab("Dependencies", depPanel);

        intellijRadButton.setText("IntelliJ");
        intellijRadButton.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                intellijRadButtonStateChanged(evt);
            }
        });

        eclipseRadButton.setText("Eclipse");
        eclipseRadButton.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                eclipseRadButtonStateChanged(evt);
            }
        });

        gradleVersionLabel.setHorizontalAlignment(SwingConstants.TRAILING);
        gradleVersionLabel.setText("Gradle 3.14");

        javaVersionLabel.setHorizontalAlignment(SwingConstants.TRAILING);
        javaVersionLabel.setText("Java 9.232");

        modGenerateButton.setText("Generate");
        modGenerateButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                modGenerateButtonActionPerformed(evt);
            }
        });

        GroupLayout modGeneratePanelLayout = new GroupLayout(modGeneratePanel);
        modGeneratePanel.setLayout(modGeneratePanelLayout);
        modGeneratePanelLayout.setHorizontalGroup(modGeneratePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(modGeneratePanelLayout.createSequentialGroup()
                .addComponent(filler1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(modGenerateButton, GroupLayout.PREFERRED_SIZE, 133, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(filler2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        modGeneratePanelLayout.setVerticalGroup(modGeneratePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(filler2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(filler1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(GroupLayout.Alignment.TRAILING, modGeneratePanelLayout.createSequentialGroup()
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(modGenerateButton)
                .addGap(15, 15, 15))
        );

        fileMenu.setText("File");

        menuItemNew.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, CTRLCMD));
        menuItemNew.setText("New");
        fileMenu.add(menuItemNew);

        menuItemOpen.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, CTRLCMD));
        menuItemOpen.setText("Open");
        fileMenu.add(menuItemOpen);

        menuItemSave.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, CTRLCMD));
        menuItemSave.setText("Save");
        fileMenu.add(menuItemSave);

        menuItemSaveAs.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, CTRLCMD | InputEvent.ALT_MASK));
        menuItemSaveAs.setText("Save As");
        fileMenu.add(menuItemSaveAs);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");

        menuItemCopy.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C, CTRLCMD));
        menuItemCopy.setText("Copy");
        editMenu.add(menuItemCopy);

        menuItemCut.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X, CTRLCMD));
        menuItemCut.setText("Cut");
        editMenu.add(menuItemCut);

        menuItemPaste.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_V, CTRLCMD));
        menuItemPaste.setText("Paste");
        editMenu.add(menuItemPaste);

        menuItemSelectAll.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A, CTRLCMD));
        menuItemSelectAll.setText("Select All");
        editMenu.add(menuItemSelectAll);

        menuItemDeselect.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A, CTRLCMD | InputEvent.ALT_MASK));
        menuItemDeselect.setText("Deselect");
        editMenu.add(menuItemDeselect);

        menuBar.add(editMenu);

        projectMenu.setText("Project");

        menuItemGenerate.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_G, CTRLCMD));
        menuItemGenerate.setText("Generate");
        projectMenu.add(menuItemGenerate);

        menuItemClean.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_BACK_SPACE, CTRLCMD | InputEvent.SHIFT_MASK));
        menuItemClean.setText("Clean");
        projectMenu.add(menuItemClean);

        menuItemCompileJar.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_G, CTRLCMD | InputEvent.SHIFT_MASK));
        menuItemCompileJar.setText("Compile Jar");
        projectMenu.add(menuItemCompileJar);

        menuBar.add(projectMenu);

        aboutMenu.setText("About");

        menuItemAboutSB.setText("About SulfurBox");
        aboutMenu.add(menuItemAboutSB);

        menuItemManual.setText("Manual");
        aboutMenu.add(menuItemManual);

        menuItemOnlineSupport.setText("Online Support");
        aboutMenu.add(menuItemOnlineSupport);

        menuItemCheckUpdates.setText("Check For Updates");
        aboutMenu.add(menuItemCheckUpdates);

        menuItemRequestRepo.setText("Request Maven Repo");
        menuItemRequestRepo.setToolTipText("Request to Add Maven Mod Repository");
        aboutMenu.add(menuItemRequestRepo);

        menuBar.add(aboutMenu);

        optionsMenu.setText("Options");

        lafMenu.setText("Look And Feel");
        optionsMenu.add(lafMenu);

        menuBar.add(optionsMenu);

        setJMenuBar(menuBar);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(modPropertyTabs)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(eclipseRadButton, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)
                            .addComponent(intellijRadButton, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(modGeneratePanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addComponent(gradleVersionLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(javaVersionLabel, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(modPropertyTabs)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(modGeneratePanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(eclipseRadButton)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(intellijRadButton)
                                .addGap(0, 7, Short.MAX_VALUE))))
                    .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(gradleVersionLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(javaVersionLabel)
                        .addContainerGap())))
        );

        ideButtonGroup.add(intellijRadButton);
        ideButtonGroup.add(eclipseRadButton);

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

	private void modNameFieldKeyReleased(KeyEvent evt) {//GEN-FIRST:event_modNameFieldKeyReleased
		String error = currentProject.setModName(modNameField.getText());
		if (error.length() > 0) modNameField.setBackground(invalidTextFieldInputColor);
		else modNameField.setBackground(UIManager.getDefaults().getColor("TextField.background"));
		modNameField.setToolTipText(error);
	}//GEN-LAST:event_modNameFieldKeyReleased

	private void modPackageFieldKeyReleased(KeyEvent evt) {//GEN-FIRST:event_modPackageFieldKeyReleased
		String error = currentProject.setPackageName(modPackageField.getText());
		if (error.length() > 0) modPackageField.setBackground(invalidTextFieldInputColor);
		else modPackageField.setBackground(UIManager.getDefaults().getColor("TextField.background"));
		modPackageField.setToolTipText(error);
	}//GEN-LAST:event_modPackageFieldKeyReleased

	private void modPackageMemberFieldKeyReleased(KeyEvent evt) {//GEN-FIRST:event_modPackageMemberFieldKeyReleased
		String error = currentProject.setPackageModuleName(modPackageMemberField.getText());
		if (error.length() > 0) modPackageMemberField.setBackground(invalidTextFieldInputColor);
		else modPackageMemberField.setBackground(UIManager.getDefaults().getColor("TextField.background"));
		modPackageMemberField.setToolTipText(error);
	}//GEN-LAST:event_modPackageMemberFieldKeyReleased

	private void modVersionFieldKeyReleased(KeyEvent evt) {//GEN-FIRST:event_modVersionFieldKeyReleased
		String error = currentProject.setModVersion(modVersionField.getText());
		if (error.length() > 0) modVersionField.setBackground(invalidTextFieldInputColor);
		else modVersionField.setBackground(UIManager.getDefaults().getColor("TextField.background"));
		modVersionField.setToolTipText(error);
	}//GEN-LAST:event_modVersionFieldKeyReleased

	private void mcVersionSelectItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_mcVersionSelectItemStateChanged
		String error = currentProject.setMcVersion(mcVersionSelect.getSelectedItem().toString());
		if (error.length() > 0) mcVersionSelect.setBackground(invalidChoiceInputColor);
		else mcVersionSelect.setBackground(UIManager.getDefaults().getColor("ComboBox.background"));
		mcVersionSelect.setToolTipText(error);
	}//GEN-LAST:event_mcVersionSelectItemStateChanged

	private void forgeVersionSelectItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_forgeVersionSelectItemStateChanged
		String error = currentProject.setForgeVersion(forgeVersionSelect.getSelectedItem().toString());
		if (error.length() > 0) forgeVersionSelect.setBackground(invalidChoiceInputColor);
		else forgeVersionSelect.setBackground(UIManager.getDefaults().getColor("ComboBox.background"));
		forgeVersionSelect.setToolTipText(error);
	}//GEN-LAST:event_forgeVersionSelectItemStateChanged

	private void modDescriptionFieldKeyReleased(KeyEvent evt) {//GEN-FIRST:event_modDescriptionFieldKeyReleased
		String error = currentProject.setDescription(modDescriptionField.getText());
		if (error.length() > 0) modDescriptionField.setBackground(invalidTextFieldInputColor);
		else modDescriptionField.setBackground(UIManager.getDefaults().getColor("TextField.background"));
		modDescriptionField.setToolTipText(error);
	}//GEN-LAST:event_modDescriptionFieldKeyReleased

	private void modHomePageHttpsSelectItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_modHomePageHttpsSelectItemStateChanged
		String error = currentProject.setHomepage(modHomePageHttpsSelect.getSelectedItem().toString() + modHomePageField.getText());
	}//GEN-LAST:event_modHomePageHttpsSelectItemStateChanged

	private void modHomePageFieldKeyReleased(KeyEvent evt) {//GEN-FIRST:event_modHomePageFieldKeyReleased
		String error = currentProject.setHomepage(modHomePageHttpsSelect.getSelectedItem().toString() + modHomePageField.getText());
		if (error.length() > 0) modHomePageField.setBackground(invalidTextFieldInputColor);
		else modHomePageField.setBackground(UIManager.getDefaults().getColor("TextField.background"));
		modHomePageField.setToolTipText(error);
	}//GEN-LAST:event_modHomePageFieldKeyReleased

	private void modRepoFieldKeyReleased(KeyEvent evt) {//GEN-FIRST:event_modRepoFieldKeyReleased
		String error = currentProject.setModRepository(modRepoField.getText());
		if (error.length() > 0) modRepoField.setBackground(invalidTextFieldInputColor);
		else modRepoField.setBackground(UIManager.getDefaults().getColor("TextField.background"));
		modRepoField.setToolTipText(error);
	}//GEN-LAST:event_modRepoFieldKeyReleased

	private void issueTrackerFieldKeyReleased(KeyEvent evt) {//GEN-FIRST:event_issueTrackerFieldKeyReleased
		String error = currentProject.setIssuesPage(issueTrackerField.getText());
		if (error.length() > 0) issueTrackerField.setBackground(invalidTextFieldInputColor);
		else issueTrackerField.setBackground(UIManager.getDefaults().getColor("TextField.background"));
		issueTrackerField.setToolTipText(error);
	}//GEN-LAST:event_issueTrackerFieldKeyReleased

	private void modUpdateChecksFieldKeyReleased(KeyEvent evt) {//GEN-FIRST:event_modUpdateChecksFieldKeyReleased
		String error = currentProject.setUpdateCheck(modUpdateChecksField.getText());
		if (error.length() > 0) modUpdateChecksField.setBackground(invalidTextFieldInputColor);
		else modUpdateChecksField.setBackground(UIManager.getDefaults().getColor("TextField.background"));
		modUpdateChecksField.setToolTipText(error);
	}//GEN-LAST:event_modUpdateChecksFieldKeyReleased

	private void modCurseIDFieldKeyReleased(KeyEvent evt) {//GEN-FIRST:event_modCurseIDFieldKeyReleased
		String error = currentProject.setCurseforgeID(modCurseIDField.getText());
		if (error.length() > 0) modCurseIDField.setBackground(invalidTextFieldInputColor);
		else modCurseIDField.setBackground(UIManager.getDefaults().getColor("TextField.background"));
		modCurseIDField.setToolTipText(error);
	}//GEN-LAST:event_modCurseIDFieldKeyReleased

	private void modLicenseFieldKeyReleased(KeyEvent evt) {//GEN-FIRST:event_modLicenseFieldKeyReleased
		String error = currentProject.setLicense(modLicenseField.getSelectedItem().toString());
		if (error.length() > 0) modLicenseField.setBackground(invalidTextFieldInputColor);
		else modLicenseField.setBackground(UIManager.getDefaults().getColor("TextField.background"));
		modLicenseField.setToolTipText(error);
	}//GEN-LAST:event_modLicenseFieldKeyReleased

	private void modLicenseFieldItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_modLicenseFieldItemStateChanged
		String error = currentProject.setLicense(modLicenseField.getSelectedItem().toString());
		if (error.length() > 0) modLicenseField.setBackground(invalidTextFieldInputColor);
		else modLicenseField.setBackground(UIManager.getDefaults().getColor("TextField.background"));
		modLicenseField.setToolTipText(error);
	}//GEN-LAST:event_modLicenseFieldItemStateChanged

	private void modLogoFieldKeyReleased(KeyEvent evt) {//GEN-FIRST:event_modLogoFieldKeyReleased
		String error = currentProject.setLogopath(modLogoField.getText());
		if (error.length() > 0) modLogoField.setBackground(invalidTextFieldInputColor);
		else modLogoField.setBackground(UIManager.getDefaults().getColor("TextField.background"));
		modLogoField.setToolTipText(error);
	}//GEN-LAST:event_modLogoFieldKeyReleased

	private void modLogoBrowseButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_modLogoBrowseButtonActionPerformed
		// TODO: Add handler code

	}//GEN-LAST:event_modLogoBrowseButtonActionPerformed

	private void eclipseRadButtonStateChanged(ChangeEvent evt) {//GEN-FIRST:event_eclipseRadButtonStateChanged
		// TODO: Add handler code

	}//GEN-LAST:event_eclipseRadButtonStateChanged

	private void intellijRadButtonStateChanged(ChangeEvent evt) {//GEN-FIRST:event_intellijRadButtonStateChanged
		// TODO: Add handler code

	}//GEN-LAST:event_intellijRadButtonStateChanged

	private void modGenerateButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_modGenerateButtonActionPerformed
		// TODO: Add handler code
		GenerateAll.construct(currentProject.project);
		if (eclipseRadButton.isSelected()) GenerateAll.generateIDE(currentProject.project, "eclipse");
		if (intellijRadButton.isSelected()) GenerateAll.generateIDE(currentProject.project, "idea");
	}//GEN-LAST:event_modGenerateButtonActionPerformed

	private void attribContributorTableKeyReleased(KeyEvent evt) {//GEN-FIRST:event_attribContributorTableKeyReleased
		// TODO: Add handler code

	}//GEN-LAST:event_attribContributorTableKeyReleased

	private void attribContributorAddActionPerformed(ActionEvent evt) {//GEN-FIRST:event_attribContributorAddActionPerformed
		// TODO: Add handler code

	}//GEN-LAST:event_attribContributorAddActionPerformed

	private void attribContributorRemoveActionPerformed(ActionEvent evt) {//GEN-FIRST:event_attribContributorRemoveActionPerformed
		// TODO: Add handler code

	}//GEN-LAST:event_attribContributorRemoveActionPerformed

	private void attribCreditsFieldKeyReleased(KeyEvent evt) {//GEN-FIRST:event_attribCreditsFieldKeyReleased
		String error = currentProject.setCredits(attribCreditsField.getText());
		if (error.length() > 0) attribCreditsField.setBackground(invalidTextFieldInputColor);
		else attribCreditsField.setBackground(UIManager.getDefaults().getColor("TextField.background"));
		attribCreditsField.setToolTipText(error);
	}//GEN-LAST:event_attribCreditsFieldKeyReleased

	private void depParentCheckStateChanged(ChangeEvent evt) {//GEN-FIRST:event_depParentCheckStateChanged
		// TODO: Add handler code

	}//GEN-LAST:event_depParentCheckStateChanged

	private void depParentFieldKeyReleased(KeyEvent evt) {//GEN-FIRST:event_depParentFieldKeyReleased
		String error = currentProject.setParentMod(depParentField.getText());
		if (error.length() > 0) depParentField.setBackground(invalidTextFieldInputColor);
		else depParentField.setBackground(UIManager.getDefaults().getColor("TextField.background"));
		depParentField.setToolTipText(error);
	}//GEN-LAST:event_depParentFieldKeyReleased

	private void depModsTableKeyReleased(KeyEvent evt) {//GEN-FIRST:event_depModsTableKeyReleased
		// TODO: Add handler code

	}//GEN-LAST:event_depModsTableKeyReleased

	private void depModsAddActionPerformed(ActionEvent evt) {//GEN-FIRST:event_depModsAddActionPerformed
		// TODO: Add handler code

	}//GEN-LAST:event_depModsAddActionPerformed

	private void depModsRemoveActionPerformed(ActionEvent evt) {//GEN-FIRST:event_depModsRemoveActionPerformed
		// TODO: Add handler code

	}//GEN-LAST:event_depModsRemoveActionPerformed

	private void depJavaLibsListKeyReleased(KeyEvent evt) {//GEN-FIRST:event_depJavaLibsListKeyReleased
		// TODO: Add handler code

	}//GEN-LAST:event_depJavaLibsListKeyReleased

	private void depJavaLibsAddActionPerformed(ActionEvent evt) {//GEN-FIRST:event_depJavaLibsAddActionPerformed
		// TODO: Add handler code

	}//GEN-LAST:event_depJavaLibsAddActionPerformed

	private void depJavaLibsRemoveActionPerformed(ActionEvent evt) {//GEN-FIRST:event_depJavaLibsRemoveActionPerformed
		// TODO: Add handler code

	}//GEN-LAST:event_depJavaLibsRemoveActionPerformed

	private void depMavenRepsListKeyReleased(KeyEvent evt) {//GEN-FIRST:event_depMavenRepsListKeyReleased
		// TODO: Add handler code

	}//GEN-LAST:event_depMavenRepsListKeyReleased

	private void depMavenRepsAddActionPerformed(ActionEvent evt) {//GEN-FIRST:event_depMavenRepsAddActionPerformed
		// TODO: Add handler code

	}//GEN-LAST:event_depMavenRepsAddActionPerformed

	private void depMavenRepsRemoveActionPerformed(ActionEvent evt) {//GEN-FIRST:event_depMavenRepsRemoveActionPerformed
		// TODO: Add handler code

	}//GEN-LAST:event_depMavenRepsRemoveActionPerformed

	private void depManifestListKeyReleased(KeyEvent evt) {//GEN-FIRST:event_depManifestListKeyReleased
		// TODO: Add handler code

	}//GEN-LAST:event_depManifestListKeyReleased

	private void depManifestAddActionPerformed(ActionEvent evt) {//GEN-FIRST:event_depManifestAddActionPerformed
		// TODO: Add handler code

	}//GEN-LAST:event_depManifestAddActionPerformed

	private void depManifestRemoveActionPerformed(ActionEvent evt) {//GEN-FIRST:event_depManifestRemoveActionPerformed
		// TODO: Add handler code

	}//GEN-LAST:event_depManifestRemoveActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JMenu aboutMenu;
    private JButton attribContributorAdd;
    private JButton attribContributorRemove;
    private JScrollPane attribContributorScrlPane;
    private JTable attribContributorTable;
    private JTextArea attribCreditsField;
    private JLabel attribCreditsLabel;
    private JScrollPane attribCreditsScrlPane;
    private JPanel attribPanel;
    private JButton depJavaLibsAdd;
    private JLabel depJavaLibsFields;
    private JList<String> depJavaLibsList;
    private JPanel depJavaLibsPanel;
    private JButton depJavaLibsRemove;
    private JScrollPane depJavaLibsScrlPane;
    private JButton depManifestAdd;
    private JLabel depManifestLabel;
    private JList<String> depManifestList;
    private JPanel depManifestPanel;
    private JButton depManifestRemove;
    private JScrollPane depManifestScrlPane;
    private JButton depMavenRepsAdd;
    private JLabel depMavenRepsLabel;
    private JList<String> depMavenRepsList;
    private JPanel depMavenRepsPanel;
    private JButton depMavenRepsRemove;
    private JScrollPane depMavenRepsScrlPane;
    private JButton depModsAdd;
    private JLabel depModsLabel;
    private JPanel depModsPanel;
    private JButton depModsRemove;
    private JScrollPane depModsScrlPane;
    private JTable depModsTable;
    private JPanel depPanel;
    private JCheckBox depParentCheck;
    private JTextField depParentField;
    private JLabel depParentLabel;
    private JRadioButton eclipseRadButton;
    private JMenu editMenu;
    private JMenu fileMenu;
    private Box.Filler filler1;
    private Box.Filler filler2;
    private JComboBox<String> forgeVersionSelect;
    private JLabel gradleVersionLabel;
    private ButtonGroup ideButtonGroup;
    private JRadioButton intellijRadButton;
    private JTextField issueTrackerField;
    private JLabel issueTrackerLabel;
    private JLabel javaVersionLabel;
    private JMenu lafMenu;
    private JLabel mcForgeVersionLabel;
    private JComboBox<String> mcVersionSelect;
    private JMenuBar menuBar;
    private JMenuItem menuItemAboutSB;
    private JMenuItem menuItemCheckUpdates;
    private JMenuItem menuItemClean;
    private JMenuItem menuItemCompileJar;
    private JMenuItem menuItemCopy;
    private JMenuItem menuItemCut;
    private JMenuItem menuItemDeselect;
    private JMenuItem menuItemGenerate;
    private JMenuItem menuItemManual;
    private JMenuItem menuItemNew;
    private JMenuItem menuItemOnlineSupport;
    private JMenuItem menuItemOpen;
    private JMenuItem menuItemPaste;
    private JMenuItem menuItemRequestRepo;
    private JMenuItem menuItemSave;
    private JMenuItem menuItemSaveAs;
    private JMenuItem menuItemSelectAll;
    private JTextField modCurseIDField;
    private JLabel modCurseIDLabel;
    private JTextArea modDescriptionField;
    private JLabel modDescriptionLabel;
    private JScrollPane modDescriptionScrlPane;
    private JButton modGenerateButton;
    private JPanel modGeneratePanel;
    private JTextField modHomePageField;
    private JComboBox<String> modHomePageHttpsSelect;
    private JLabel modHomePageLabel;
    private JComboBox<String> modLicenseField;
    private JLabel modLicenseLabel;
    private JButton modLogoBrowseButton;
    private JTextField modLogoField;
    private JLabel modLogoLabel;
    private JTextField modNameField;
    private JLabel modNameLabel;
    private JTextField modPackageField;
    private JLabel modPackageLabel;
    private JTextField modPackageMemberField;
    private JLabel modPackageSeparatorLabel;
    private JPanel modPanel;
    private JTabbedPane modPropertyTabs;
    private JTextField modRepoField;
    private JLabel modRepoLabel;
    private JTextField modUpdateChecksField;
    private JLabel modUpdateChecksLabel;
    private JTextField modVersionField;
    private JLabel modVersionLabel;
    private JMenu optionsMenu;
    private JMenu projectMenu;
    private BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
